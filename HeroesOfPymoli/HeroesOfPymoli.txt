Jupyter Notebook
HeroesOfPymoli
Last Checkpoint: a few seconds ago
(autosaved)
Current Kernel Logo
Python 3 
File
Edit
View
Insert
Cell
Kernel
Widgets
Help

# Unit 4 | Assignment - Pandas, Pandas, Pandas
​
### Option 1: Heroes of Pymoli
​
Congratulations! After a lot of hard work in the data munging mines, you've landed a job as Lead Analyst for an independent gaming company. You've been assigned the task of analyzing the data for their most recent fantasy game Heroes of Pymoli. Like many others in its genre, the game is free-to-play, but players are encouraged to purchase optional items that enhance their playing experience. As a first task, the company would like you to generate a report that breaks down the game's purchasing data into meaningful insights.
​
## Heroes of Pymoli (HoP) Quick Stats & Observations
​
Total Players: 576
Unique Items: 179
Total Purchases: 780
Total Revenue: $2,379.77
​
♂ For Gender demo, 84.03% of HoP players were Male.
     ♀ While Females only consisted of 14.06%, they did outspend Male players ($4.47 to $4.07) when looking at Avg Total Purchase per Person. 
​
○ For Age demo, 76.74% of players were between the ages of 15-29. 
     • The largest age bucket was our 20-24 age players, which was 44.79% of all HoP players.
     • The 20-24 age group also brought in the most Total Purchase Revenue of $1,114.06, which was 46.8% of our Total Purchase        Revenue. 
     • Interestly however, it was only the third highest Avg Total Purchase per Person at $4.32. (#1 was the <10 age group at          $4.54, #2 was the 35-39 at $4.76). 
     • While <10 age group is limited in terms of buying power, the 35-39 group would not have those same limitations. 
​
○ Our top item in purchases and revenue was Item #178 (Oathbreaker, Last Hope of the Breaking Storm). 
     • This beauty was purchased 12 times bringing in $50.76 in revenue.
 
# Dependencies and Setup
import pandas as pd
import numpy as np
​
# File to Load (Remember to Change These)
file = "Resources/purchase_data.csv"
​
# Read Purchasing File and store into Pandas data frame
purchase_data = pd.read_csv(file)
purchase_data.head()
​
Purchase ID	SN	Age	Gender	Item ID	Item Name	Price
0	0	Lisim78	20	Male	108	Extraction, Quickblade Of Trembling Hands	3.53
1	1	Lisovynya38	40	Male	143	Frenzied Scimitar	1.56
2	2	Ithergue48	24	Male	92	Final Critic	4.88
3	3	Chamassasya86	24	Male	100	Blindscythe	3.27
4	4	Iskosia90	23	Male	131	Fury	1.44
# Player Count

  • Total Number of Players
# Player Count
​
  • Total Number of Players
#Player Count
# Display the total number of players
​
player_count = purchase_data["SN"].nunique()
​
total_players = pd.DataFrame({"Total Players":[player_count]})
total_players
​
Total Players
0	576
# Purchasing Analysis (Total)

  • Number of Unique Items
  • Average Purchase Price
  • Total Number of Purchases
  • Total Revenue
# Purchasing Analysis (Total)
​
  • Number of Unique Items
  • Average Purchase Price
  • Total Number of Purchases
  • Total Revenue
#Purchasing Analysis (Total)
# Run basic calculations to obtain number of unique items, average price, etc.
# Create a summary data frame to hold the results
# Optional: give the displayed data cleaner formatting
# Display the summary data frame
​
item_count = purchase_data["Item Name"].nunique()
avg_price = purchase_data["Price"].mean()
total_purchases = purchase_data["Purchase ID"].nunique()
total_revenue = purchase_data["Price"].sum()
​
summary_table = pd.DataFrame({"Unique Items": [item_count],
                              "Avg Price": [avg_price],
                              "Total Purchases": [total_purchases],
                              "Total Revenue": [total_revenue]})
​
summary_table.style.format({"Avg Price": "${:.2f}", "Total Revenue": "${:.2f}"})
​
Unique Items	Avg Price	Total Purchases	Total Revenue
0	179	$3.05	780	$2379.77
  
# Gender Demographics
​
  • Percentage and Count of Male Players
  • Percentage and Count of Female Players
  • Percentage and Count of Other / Non-Disclosed
#Gender Demographics
# Percentage and Count of Male Players
# Percentage and Count of Female Players
# Percentage and Count of Other / Non-Disclosed
​
gender_data = purchase_data.groupby(["Gender"])
gender_totals = gender_data["SN"].nunique()
gender_pct = gender_totals / player_count * 100
​
gender_table = pd.DataFrame({"Total Count": gender_totals, "Percentage of Players": gender_pct})
​
gender_table.index.name = "Gender"
​
gender_summary = gender_table.sort_values("Total Count", ascending=False).style.format({"Percentage of Players":"{:.2f}"})
​
gender_summary
Total Count	Percentage of Players
Gender		
Male	484	84.03
Female	81	14.06
Other / Non-Disclosed	11	1.91
# Purchasing Analysis (Gender)

• The below each broken by gender
  • Purchase Count
  • Average Purchase Price
  • Total Purchase Value
  • Average Purchase Total per Person by Gender
# Purchasing Analysis (Gender)
​
• The below each broken by gender
  • Purchase Count
  • Average Purchase Price
  • Total Purchase Value
  • Average Purchase Total per Person by Gender
purch_count = gender_data["Purchase ID"].count()
avg_purch = gender_data["Price"].mean()
ttl_purch = gender_data["Price"].sum()
avg_ttl_person = ttl_purch/gender_totals
#Purchasing Analysis (Gender)
# Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. by gender
# Create a summary data frame to hold the results
# Optional: give the displayed data cleaner formatting
# Display the summary data frame
​
purch_count = gender_data["Purchase ID"].count()
avg_purch = gender_data["Price"].mean()
ttl_purch = gender_data["Price"].sum()
avg_ttl_person = ttl_purch/gender_totals
​
​
gender_purch = pd.DataFrame({"Purchase Count": purch_count, "Avg Purchase Price": avg_purch,
                             "Total Purchase Value": ttl_purch, "Avg Total Purchase per Person": avg_ttl_person})
​
gender_purch.index.name = "Gender"
​
gender_purch.style.format({"Avg Purchase Price":"${:.2f}",
                           "Total Purchase Value":"${:,.2f}",
                           "Avg Total Purchase per Person":"${:.2f}"})
​
Purchase Count	Avg Purchase Price	Total Purchase Value	Avg Total Purchase per Person
Gender				
Female	113	$3.20	$361.94	$4.47
Male	652	$3.02	$1,967.64	$4.07
Other / Non-Disclosed	15	$3.35	$50.19	$4.56
  
# Age Demographics
​
• The below each broken into bins of 4 years (i.e. <10, 10-14, 15-19, etc.)
  • Purchase Count
  • Average Purchase Price
  • Total Purchase Value
  • Average Purchase Total per Person by Age Group
#Age Demographics
# Establish bins for ages
# Categorize the existing players using the age bins. Hint: use pd.cut()
# Calculate the numbers and percentages by age group
# Create a summary data frame to hold the results
# Optional: round the percentage column to two decimal points
# Display Age Demographics Table
​
#find the max age, which was 45
#print(purchase_data["Age"].max())
​
age_bins = [0, 9.99, 14.99, 19.99, 24.99, 29.99, 34.99, 39.99, 99.99]
group_names = ["<10", "10-14", "15-19", "20-24", "25-29", "30-34", "35-39", "40+"]
​
#run check to slice and put into the bins
#pd.cut(purchase_data["Age"], age_bins, labels=group_names).head()
​
purchase_data["Age Group"] = pd.cut(purchase_data["Age"], age_bins, labels=group_names)
purchase_data.head(25)
​
age_grouping = purchase_data.groupby("Age Group")
​
age_grp_totals = age_grouping["SN"].nunique()
age_grp_pcts = (age_grp_totals/player_count)*100
​
age_summary = pd.DataFrame({"Total Count": age_grp_totals, "Percentage of Players": age_grp_pcts})
​
age_summary.index.name = "Age Group"
​
age_summary.style.format({"Percentage of Players":"{:.2f}"})
​
Total Count	Percentage of Players
Age Group		
<10	17	2.95
10-14	22	3.82
15-19	107	18.58
20-24	258	44.79
25-29	77	13.37
30-34	52	9.03
35-39	31	5.38
40+	12	2.08
Age Group
# Purchasing Analysis (Age)
​
• The below each broken by Age Group
  • Purchase Count
  • Average Purchase Price
  • Total Purchase Value
  • Average Purchase Total per Person by Age Group
age_purch.style.format({"Avg Purchase Price":"${:.2f}", "Total Purchase Value":"${:,.2f}",
                        "Avg Total Purchase per Person":"${:.2f}"})

#Purchasing Analysis (Age)
# Bin the purchase_data data frame by age
# Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. in the table below
# Create a summary data frame to hold the results
# Optional: give the displayed data cleaner formatting
# Display the summary data frame
​
age_purch_count = age_grouping["Purchase ID"].count()
age_avg_purch = age_grouping["Price"].mean()
age_ttl_purch = age_grouping["Price"].sum()
age_avg_ttl_person = age_ttl_purch/age_grp_totals
​
​
age_purch = pd.DataFrame({"Purchase Count": age_purch_count, "Avg Purchase Price": age_avg_purch,
                             "Total Purchase Value": age_ttl_purch, "Avg Total Purchase per Person": age_avg_ttl_person})
​
age_purch.index.name = "Age Group"
​
age_purch.style.format({"Avg Purchase Price":"${:.2f}", "Total Purchase Value":"${:,.2f}",
                        "Avg Total Purchase per Person":"${:.2f}"})
​
Purchase Count	Avg Purchase Price	Total Purchase Value	Avg Total Purchase per Person
Age Group				
<10	23	$3.35	$77.13	$4.54
10-14	28	$2.96	$82.78	$3.76
15-19	136	$3.04	$412.89	$3.86
20-24	365	$3.05	$1,114.06	$4.32
25-29	101	$2.90	$293.00	$3.81
30-34	73	$2.93	$214.00	$4.12
35-39	41	$3.60	$147.67	$4.76
40+	13	$2.94	$38.24	$3.19
  
# Top Spenders
​
• Identify the the top 5 spenders in the game by total purchase value, then list (in a table):
  • SN
  • Purchase Count
  • Average Purchase Price
  • Total Purchase Value
10
#Top Spenders
# Run basic calculations to obtain the results in the table below
# Create a summary data frame to hold the results
# Sort the total purchase value column in descending order
# Optional: give the displayed data cleaner formatting
# Display a preview of the summary data frame
​
top_spenders = purchase_data.groupby(["SN"])
top_purch_count = top_spenders["Purchase ID"].count()
top_avg_purch = top_spenders["Price"].mean()
top_ttl_purch = top_spenders["Price"].sum()
​
top_spend_table = pd.DataFrame({"Purchase Count": top_purch_count, "Avg Purchase Price": top_avg_purch,
                                "Total Purchase Value": top_ttl_purch})
​
top_spend_table.index.name = "SN"
​
top_spend_summary = top_spend_table.sort_values("Total Purchase Value", ascending=False).head(10)
​
top_spend_summary.style.format({"Avg Purchase Price":"${:.2f}", "Total Purchase Value":"${:,.2f}"})
​
​
Purchase Count	Avg Purchase Price	Total Purchase Value
SN			
Lisosia93	5	$3.79	$18.96
Idastidru52	4	$3.86	$15.45
Chamjask73	3	$4.61	$13.83
Iral74	4	$3.40	$13.62
Iskadarya95	3	$4.37	$13.10
Ilarin91	3	$4.23	$12.70
Ialallo29	3	$3.95	$11.84
Tyidaim51	3	$3.94	$11.83
Lassilsala30	3	$3.84	$11.51
Chadolyla44	3	$3.82	$11.46
# Most Popular Items
​
• Identify the 5 most popular items by purchase count, then list (in a table):
  • Item ID
  • Item Name
  • Purchase Count
  • Item Price
  • Total Purchase Value
10
#Most Popular Items
# Retrieve the Item ID, Item Name, and Item Price columns
# Group by Item ID and Item Name. Perform calculations to obtain purchase count, item price, and total purchase value
# Create a summary data frame to hold the results
# Sort the purchase count column in descending order
# Optional: give the displayed data cleaner formatting
# Display a preview of the summary data frame
​
popular_items = purchase_data.groupby(["Item ID", "Item Name"])
popular_purch_count = popular_items["Purchase ID"].count()
popular_ttl_purch = popular_items["Price"].sum()
item_price = popular_ttl_purch/popular_purch_count
​
popular_table = pd.DataFrame({"Purchase Count": popular_purch_count, "Item Price": item_price,
                              "Total Purchase Value": popular_ttl_purch})
​
popular_summary = popular_table.sort_values("Purchase Count", ascending=False).head(10)
​
popular_summary.style.format({"Item Price":"${:.2f}", "Total Purchase Value":"${:,.2f}"})
​
Purchase Count	Item Price	Total Purchase Value
Item ID	Item Name			
178	Oathbreaker, Last Hope of the Breaking Storm	12	$4.23	$50.76
145	Fiery Glass Crusader	9	$4.58	$41.22
108	Extraction, Quickblade Of Trembling Hands	9	$3.53	$31.77
82	Nirvana	9	$4.90	$44.10
19	Pursuit, Cudgel of Necromancy	8	$1.02	$8.16
103	Singed Scalpel	8	$4.35	$34.80
75	Brutality Ivory Warmace	8	$2.42	$19.36
72	Winter's Bite	8	$3.77	$30.16
60	Wolf	8	$3.54	$28.32
59	Lightning, Etcher of the King	8	$4.23	$33.84
# Most Profitable Items
​
• Identify the 5 most profitable items by total purchase value, then list (in a table):
  • Item ID
  • Item Name
  • Purchase Count
  • Item Price
  • Total Purchase Value
#Most Profitable Items
# Sort the above table by total purchase value in descending order
# Optional: give the displayed data cleaner formatting
# Display a preview of the data frame
​
popular_summary = popular_table.sort_values("Total Purchase Value", ascending=False).head(10)
​
popular_summary.style.format({"Item Price":"${:.2f}", "Total Purchase Value":"${:,.2f}"})
​
Purchase Count	Item Price	Total Purchase Value
Item ID	Item Name			
178	Oathbreaker, Last Hope of the Breaking Storm	12	$4.23	$50.76
82	Nirvana	9	$4.90	$44.10
145	Fiery Glass Crusader	9	$4.58	$41.22
92	Final Critic	8	$4.88	$39.04
103	Singed Scalpel	8	$4.35	$34.80
59	Lightning, Etcher of the King	8	$4.23	$33.84
108	Extraction, Quickblade Of Trembling Hands	9	$3.53	$31.77
78	Glimmer, Ender of the Moon	7	$4.40	$30.80
72	Winter's Bite	8	$3.77	$30.16
60	Wolf	8	$3.54	$28.32
